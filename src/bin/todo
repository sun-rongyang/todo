#!/bin/bash
## A command line tool to manage todo list for a project

## Global Variables
CurrentFolder=$PWD
ToDoFilePath=$CurrentFolder/.todo
InputArgumentsNumber=$#
InputArguments=("$@") #get the argument array
WindowCols=$(tput cols) #get the width of the current window
Platform=$(uname) #get the platform of the system

## Local functions
# Initialize a todo list
InitToDoList(){
    # Test whether a .todo file has existed
    test -f $ToDoFilePath
    if [[ $? == 0 ]]; then
        echo -e "\nPath: $CurrentFolder/ has existed a TO DO LIST!\nThe contest is:"
        ShowToDoList 
        read -p "Do you want to recover it? [Y/N] " recover_state
        if [[ $recover_state == "Y" ]]; then
            rm -f $ToDoFilePath
            touch $ToDoFilePath
            echo -e "\nTodo list has been reinitialized!" 
        elif [[ $recover_state == "N" ]]; then
            echo -e "\nNothing has been done!"
            return 0
        fi
    else
        touch $ToDoFilePath
        echo -e "\nTodo list file has been initialized at $ToDoFilePath" 
    fi
}

# Add a todo item to todo list file
AddToDoItem(){
    # local variables
    # current time
    #local current_time=$(date "+%Y-%m-%d %H:%M:%S")
    local current_time=$(date "+%Y%m%d%H%M%S")
    local todo_item_content=$(tr ' ' '_' <<< "$1") #the first variable input the function. And convert ' ' to '_' for storage todo_item_content
    local todo_item_priority=${2:-0} #set default value of todo_item_priority as 0
    # a item contains "item_state item_date item_priority item_contest"
    # item_state 0: todo, 1: completed, 2: archived
    # item_priority 0: lowest, 1: !, 2: !!, 3: !!!
    echo -e "0 $current_time $todo_item_priority $todo_item_content" >> $ToDoFilePath
    echo -e "\nA todo item has been added in the todo list!\n"
}

# Show the current folder todo list
ShowToDoList(){
    # local variables
    local stars=`printf %${WindowCols}s | tr " " "*"`
    local left_space=$(($WindowCols/2-5-2)) #left space in the title
    local right_space=$(($WindowCols-$left_space-4-10)) #right space in the title
    # print head string
    echo -e "\n$stars"
    printf "%-2s%-${left_space}s%-10s%-${right_space}s%-2s" "**" "" "TO DO LIST" "" "**"
    echo -e "\n$stars\n"
    if [[ $1 == "-t" ]]; then
        # -t sort items by date and print date
        cat $ToDoFilePath | grep '^0' | sort -t ' ' -k 2 | awk '{$2=dconv($2);gsub("0","",$3);gsub("1","!",$3);gsub("2","!!",$3);gsub("3","!!!",$3); gsub("_"," ",$4); printf "\n%-19s %-3s %s", $2, $3, $4}
        function dconv(x) {
            YY=substr(x,1,4)
            mm=substr(x,5,2)
            dd=substr(x,7,2)
            hh=substr(x,9,2)
            nn=substr(x,11,2)
            ss=substr(x,13,2)
            return YY"/"mm"/"dd" "hh":"nn":"ss
        }'
    else
        # without any argument function will show todo items sorted by priority 
        cat $ToDoFilePath | grep '^0' | sort -t ' ' -k 3 -r | awk '{gsub("0","",$3);gsub("1","!",$3);gsub("2","!!",$3);gsub("3","!!!",$3); gsub("_"," ",$4); printf "\n%-3s%-3s %s", NR ".", $3, $4}'
    fi
    echo -e "\n\n$stars\n"
}

# Complete a todo item
CompleteToDoItem(){
    # show todo list by default format
    ShowToDoList
    # ask user to input the index of the completed item
    read -p "Please input the index of the item which you have completed (Enter to cancel!): " comp_item_index
    if [[ -z $comp_item_index ]]; then
        echo -e "Nothing has been done!\n"
        exit 0
    else
        comp_item=$(cat $ToDoFilePath | grep '^0' | sort -t ' ' -k 3 -r | sed -n "${comp_item_index}p")
        comp_item_line_index=$(cat $ToDoFilePath | grep -n "$comp_item" | awk '{print $1}' FS=":")
        if [[ $Platform == "Darwin" ]]; then
            sed -i ".bak" "${comp_item_line_index}s/^0/1/g" $ToDoFilePath #".bak" add for sed at OSX system
        else
            sed -i "${comp_item_line_index}s/^0/1/g" $ToDoFilePath 
        fi
    fi
}

# Show help text
ShowHelpText(){
    echo -e "usage: todo [<command>] [<option>] [<args>]"
    echo -e "command:"
    printf "%-9s%-10s%-s\n" "" "NONE" "Show TODO list" 
    printf "%-19s%-s\n" "" "option:"
    printf "%-23s%-10s%-s\n" "" "NONE" "Show TODO list sorted by priority (default)"
    printf "%-23s%-10s%-s\n" "" "-t" "Show TODO list sorted by creation time"
    printf "%-23s%-10s%-s\n" "" "-p" "Show TODO list sorted by priority"
    printf "%-23s%-10s%-s\n" "" "--help" "Show todo help text"
    printf "%-9s%-10s%-s\n" "" "init" "Create a TODO list for current folder"
    printf "%-9s%-10s%-s\n" "" "add" "'TODO item content' [priority number from 0 to 3," 
    printf "%-9s%-10s%-s\n" "" "" "the default value is 0 which means the lowest priority]" 
    printf "%-9s%-10s%-s\n" "" "" "Add a TODO item to TODO list"
    printf "%-9s%-10s%-s\n" "" "x" "Complete a TODO item"

}
## Program begin
case ${InputArguments[0]} in
    "" )
        ShowToDoList
        ;;
    "-t")
        ShowToDoList -t
        ;;
    "-p")
        ShowHelpText
        ;;
    "--help")
        ShowHelpText
        ;;
    "init")
        InitToDoList
        ;;
    "add")
        AddToDoItem "${InputArguments[1]}" ${InputArguments[2]}
        ;;
    "x")
        CompleteToDoItem
        ;;
    *)
        echo -e "Unsupported command or option!\nNothing has been done!"
        ShowHelpText
        exit 0
esac
